/* wait and return process info */
#include <sys/types.h>
#include <sys/wait.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

#define MESSAGE "Hello"

int main(void)
{
	pid_t pid;
	char * sentence = calloc(sizeof(MESSAGE), 1);

	pid = fork();
	if (pid < 0)
	{
		perror("fork");
		exit(EXIT_FAILURE);
	}
	else if (pid == 0)
	{
		strcpy(sentence, MESSAGE);
		exit(EXIT_SUCCESS);
	}
	else
	{
		wait(NULL);
		printf("Padre: %s\n", sentence);
		free(sentence);
		exit(EXIT_SUCCESS);
	}
}

La memoria se libera en el proceso padre, porque cuando un hijo muere, muere liberando todos
los recursos que este ha usado, por lo que se podrÃ­a eliminar memoria en los procesos que 
sean hijos pero seria innecesario, por lo que solo es necesario liberar recursos en el proceso
padre.

Al hacer valgrind nos dice que hay memoria "still reachable" pero no hay errores.